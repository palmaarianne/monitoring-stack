#jinja2: lstrip_blocks: "True"

[global_tags]
{% for key, value in ms_telegraf_global_tags.items() %}
  {{ key }} = "{{ value }}"
{% endfor %}

[agent]
  interval = "{{ ms_telegraf_agent_interval }}"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "{{ ms_telegraf_agent_flush_interval }}"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  hostname = "{{ ms_telegraf_agent_hostname }}"
  omit_hostname = false

{% set cpu_config = ms_telegraf_input_cpu %}
{% if cpu_config.enabled | default(true) %}
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
  [inputs.cpu.tags]
  {% for key, value in (cpu_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set mem_config = ms_telegraf_input_mem %}
{% if mem_config.enabled | default(true) %}
[[inputs.mem]]
  [inputs.mem.tags]
  {% for key, value in (mem_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set kernel_config = ms_telegraf_input_kernel %}
{% if kernel_config.enabled | default(true) %}
[[inputs.kernel]]
  [inputs.kernel.tags]
  {% for key, value in (kernel_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set system_config = ms_telegraf_input_system %}
{% if system_config.enabled | default(true) %}
[[inputs.system]]
  [inputs.system.tags]
  {% for key, value in (system_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set processes_config = ms_telegraf_input_processes %}
{% if processes_config.enabled | default(true) %}
[[inputs.processes]]
  [inputs.processes.tags]
  {% for key, value in (processes_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set swap_config = ms_telegraf_input_swap %}
{% if swap_config.enabled | default(true) %}
[[inputs.swap]]
  [inputs.swap.tags]
  {% for key, value in (swap_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set net_config = ms_telegraf_input_net %}
{% if net_config.enabled | default(true) %}
[[inputs.net]]
  [inputs.net.tags]
  {% for key, value in (net_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set netstat_config = ms_telegraf_input_netstat %}
{% if netstat_config.enabled | default(true) %}
[[inputs.netstat]]
  [inputs.netstat.tags]
  {% for key, value in (netstat_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set disk_config = ms_telegraf_input_disk %}
{% if disk_config.enabled | default(true) %}
[[inputs.disk]]
  ignore_fs = {{ disk_config.ignore_fs | default(["tmpfs", "devtmpfs", "devfs"]) | to_json}}
  [inputs.disk.tags]
  {% for key, value in (disk_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set diskio_config = ms_telegraf_input_diskio %}
{% if diskio_config.enabled | default(true) %}
[[inputs.diskio]]
  [inputs.diskio.tags]
  {% for key, value in (diskio_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set conntrack_config = ms_telegraf_input_conntrack %}
{% if conntrack_config.enabled | default(true) %}
[[inputs.conntrack]]
  files = ["ip_conntrack_count","ip_conntrack_max", "nf_conntrack_count","nf_conntrack_max"]
  dirs = ["/proc/sys/net/ipv4/netfilter","/proc/sys/net/netfilter"]
  [inputs.conntrack.tags]
  {% for key, value in (conntrack_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set ntpq_config = ms_telegraf_input_ntpq %}
{% if ntpq_config.enabled | default(false) %}
[[inputs.ntpq]]
  dns_lookup = false
  [inputs.ntpq.tags]
  {% for key, value in (ntpq_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
  {% endfor %}
{% endif %}

{% set http_response_config = ms_telegraf_input_http_response %}
{% if http_response_config.enabled | default(true) %}
{%   for healthcheck in http_response_config.application_healthcheck_urls | default([]) %}
[[inputs.http_response]]
  urls = {{ healthcheck.urls | to_json }}
  method = "{{ healthcheck.method | default("GET") }}"
  interval = "{{ healthcheck.interval | default('15s') }}"
  response_status_code = {{ healthcheck.response_status_code | default(200) }}
{%     if healthcheck.response_string_match is defined %}
  response_string_match = '{{ healthcheck.response_string_match }}'
{%     endif %}
  [inputs.http_response.tags]
{%    for key, value in (healthcheck.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}

{%   endfor %}
{% endif %}


{% set procstat_config = ms_telegraf_input_procstat %}
{% if procstat_config.enabled | default(true) %}
{%    for process in procstat_config.monitored_system_processes | default([]) %}
[[inputs.procstat]]
  process_name = "{{ process.name }}"
  interval = "{{ process.interval | default('10s') }}"
  pid_finder = "native"
  pattern = "{{ process.pattern | default(process.name) }}"
  [inputs.procstat.tags]
{%      for key, value in (process.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%      endfor %}

{%    endfor %}
{% endif %}

{% set ping_config = ms_telegraf_input_ping %}
{% if ping_config.enabled | default(true) %}
{%    for ping in ping_config.monitored_ping_urls | default([]) %}
[[inputs.ping]]
  urls = {{ ping.urls | to_json }}
  count = {{ ping.count | default(5) }}
  timeout = {{ ping.timeout | default(2) | float}}
  [inputs.ping.tags]
{%      for key, value in (ping.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%      endfor %}

{%    endfor %}
{% endif %}

{% set filestat_config = ms_telegraf_input_filestat %}
{% if filestat_config.enabled | default(true) %}
{%    if filestat_config.monitored_files is defined %}
[[inputs.filestat]]
  interval = "60s"
  files = {{ filestat_config.monitored_files | map('regex_replace', '^(.*)', '/hostfs\\1') | to_json }}
  [inputs.filestat.tags]
{%      for key, value in (filestat_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%      endfor %}
{%    endif %}
{% endif %}

{% set x509_cert_config = ms_telegraf_input_x509_cert %}
{% if x509_cert_config.enabled | default(true) %}
{%    if x509_cert_config.sources is defined %}
[[inputs.x509_cert]]
  interval = "{{ x509_cert_config.interval | default('60s') }}"
  sources =  {{ x509_cert_config.sources | map('regex_replace', '^(file:\/\/\/|\/)(.*)', '\\1hostfs/\\2') | to_json }}
  exclude_root_certs = {{ x509_cert_config.exclude_root_certs | default('true') }}
  [inputs.x509_cert.tags]
{%      for key, value in (x509_cert_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%      endfor %}
{%    endif %}
{% endif %}

{% set docker_config = ms_telegraf_input_docker %}
{% if docker_config.enabled | default(true) %}
[[inputs.docker]]
  endpoint = "{{ docker_config.endpoint | default('unix:///var/run/docker.sock') }}"
  container_name_include = {{ docker_config.container_name_include | default([]) | to_json }}
  container_name_exclude = {{ docker_config.container_name_exclude | default([]) | to_json }}
  container_state_include = {{ docker_config.container_state_include | default([]) | to_json }}
  container_state_exclude = {{ docker_config.container_state_exclude | default([]) | to_json }}
  [inputs.docker.tags]
{%    for key, value in (docker_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}
{% endif %}

{% set linux_sysctl_fs_config = ms_telegraf_input_linux_sysctl_fs %}
{% if linux_sysctl_fs_config.enabled | default(true) %}
[[inputs.linux_sysctl_fs]]
  [inputs.linux_sysctl_fs.tags]
{%    for key, value in (linux_sysctl_fs_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}
{% endif %}

{% set haproxy_config = ms_telegraf_input_haproxy %}
{% if haproxy_config.enabled | default(true) and haproxy_config.servers is defined %}
[[inputs.haproxy]]
  servers = {{ haproxy_config.servers | map('regex_replace', '^(socket:\/|\/)(.*)', '\\1hostfs/\\2') | to_json }}
  [inputs.haproxy.tags]
{%    for key, value in (haproxy_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}
{% endif %}

{% set redis_config = ms_telegraf_input_redis %}
{% if redis_config.enabled | default(true) and redis_config.servers is defined %}
[[inputs.redis]]
  servers = {{ redis_config.servers | to_json }}
  [inputs.redis.tags]
{%    for key, value in (redis_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}
{% endif %}

{% set rabbitmq_config = ms_telegraf_input_rabbitmq %}
{% if rabbitmq_config.enabled | default(true) and rabbitmq_config.url is defined %}
[[inputs.rabbitmq]]
  url = "{{ rabbitmq_config.url }}"
  username = "{{ rabbitmq_config.username }}"
  password = "{{ rabbitmq_config.password }}"
  metric_exclude = {{ rabbitmq_config.metric_exclude | default([]) | to_json }}
  [inputs.rabbitmq.tags]
{%    for key, value in (rabbitmq_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}
{% endif %}

{% set jolokia2_agent_config = ms_telegraf_input_jolokia2_agent %}
{% if jolokia2_agent_config.enabled | default(true) and jolokia2_agent_config.urls is defined %}
[[inputs.jolokia2_agent]]
  urls = {{ jolokia2_agent_config.urls | to_json }}
  name_prefix = "{{ jolokia2_agent_config.name_prefix | default('') }}"
  [inputs.jolokia2_agent.tags]
{%    for key, value in (jolokia2_agent_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}

{%    for metric in jolokia2_agent_config.metrics | default([]) %}
[[inputs.jolokia2_agent.metric]]
  name = "{{ metric.name }}"
  mbean = "{{ metric.mbean }}"
{%        if metric.paths is defined %}
  paths = {{ metric.paths | to_json }}
{%        endif %}
{%        if metric.tag_keys is defined %}
  tag_keys = {{ metric.tag_keys | to_json }}
{%        endif %}
{%        if metric.field_prefix is defined %}
  field_prefix = "{{ metric.field_prefix }}"
{%        endif %}
{%        if metric.field_name is defined %}
  field_name = "{{ metric.field_name }}"
{%        endif %}

{%    endfor %}

{% endif %}

{% set varnish_config = ms_telegraf_input_varnish %}
{% if varnish_config.enabled | default(true) and varnish_config.binary is defined and varnish_config.adm_binary %}
[[inputs.varnish]]
  binary = "{{ varnish_config.binary | regex_replace('^(\/)(.*)', '\\1hostfs/\\2') }}"
  adm_binary = "{{ varnish_config.adm_binary | regex_replace('^(\/)(.*)', '\\1hostfs/\\2') }}"
  metric_version = {{ varnish_config.metric_version | default(1) }}
  stats = {{ varnish_config.stats | default(['*']) | to_json }}
  [inputs.varnish.tags]
{%    for key, value in (varnish_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}
{% endif %}

{% set prometheus_config = ms_telegraf_input_prometheus %}
{% if prometheus_config and prometheus_config.enabled | default(true) %}
[[inputs.prometheus]]
  urls = {{ prometheus_config.urls | to_json }}
  metric_version = {{ prometheus_config.metric_version | default(1) }}
  [inputs.prometheus.tags]
{%    for key, value in (prometheus_config.tags | default({}) ).items() %}
    {{ key }} = "{{ value }}"
{%    endfor %}
{% endif %}

{% if filestat_config.enabled | default(true) and filestat_config.monitored_files is defined %}
[[processors.regex]]
  namepass = ["filestat"]
  [[processors.regex.tags]]
    key = "file"
    pattern = "^/hostfs(.*)$"
    replacement = "$1"
{% endif %}

{% if x509_cert_config.enabled | default(true) and x509_cert_config.sources is defined %}
[[processors.regex]]
  namepass = ["x509_cert"]
  [[processors.regex.tags]]
    key = "source"
    pattern = "^(file:///|/)hostfs/(.*)$"
    replacement = "${1}${2}"
{% endif %}

{% if haproxy_config.enabled | default(true) and haproxy_config.servers is defined %}
[[processors.regex]]
  namepass = ["haproxy"]
  [[processors.regex.tags]]
    key = "server"
    pattern = "^/hostfs(.*)$"
    replacement = "${1}"
{% endif %}

{% if redis_config.enabled | default(true) and redis_config.servers is defined %}
[[processors.converter]]
  namepass = ["redis"]
  [processors.converter.fields]
    integer = ["allocator_frag_bytes"]
    string = ["used_memory_dataset_perc","used_memory_peak_perc"]
{% endif %}

{% for output_influxdb in ms_telegraf_output_influxdb %}
  {% if output_influxdb.enabled | default(true) %}
[[outputs.influxdb]]
  urls = {{ output_influxdb.urls | to_json }}
  database = "{{ output_influxdb.database | default('telegraf') }}"
  skip_database_creation = {{ output_influxdb.skip_database_creation | default(false) | ternary('true', 'false') }}
  tagexclude = {{ output_influxdb.tagexclude | default([]) | to_json }}
    {% if output_influxdb.tagdrop | default({}) %}
  [outputs.influxdb.tagdrop]
      {% for key, value in output_influxdb.tagdrop.items() %}
    {{ key }} = {{ value }}
      {% endfor %}
    {% endif %}
    {% if output_influxdb.tagpass | default({}) %}
  [outputs.influxdb.tagpass]
      {% for key, value in output_influxdb.tagpass.items() %}
    {{ key }} = {{ value }}
      {% endfor %}
    {% endif %}
  {% endif %}

{% endfor %}

{% for output_kafka in ms_telegraf_output_kafka | default({}) %}
{%  if output_kafka.enabled | default(true) %}
[[outputs.kafka]]
  brokers = {{ output_kafka.brokers | to_json }}
  topic = "{{ output_kafka.topic | default('telegraf') }}"
  routing_tag = "{{ output_kafka.routing_tag | default('host') }}"
  required_acks = {{ output_kafka.required_acks | default(0) }}
  max_retry = {{ output_kafka.max_retry | default(3) }}
  compression_codec = {{ output_kafka.compression_codec | default(0) }}
  tagexclude = {{ output_influxdb.tagexclude | default([]) | to_json }}
    {% if output_kafka.tagdrop | default({}) %}
  [outputs.kafka.tagdrop]
      {% for key, value in output_kafka.tagdrop.items() %}
    {{ key }} = {{ value }}
      {% endfor %}
    {% endif %}
    {% if output_kafka.tagpass | default({}) %}
  [outputs.kafka.tagpass]
      {% for key, value in output_kafka.tagpass.items() %}
    {{ key }} = {{ value }}
      {% endfor %}
    {% endif %}
{%    endif %}

{% endfor %}
